#####################################################
#  FICHERO DE CONFIGURACION DEL COMPONENTE CENTRAL  #
#####################################################

# Este fichero sirve para configurar el componente central de
# firma de Cl@ve Firma ("fire-signature.war").
#
# Los valores de las propiedades de este fichero pueden estar completa
# o parcialmente cifrados. En caso de introducir fragmentos cifrados, se
# debera configurar la clase encargada de descifrarlas mediante la propiedad
# "decipher.class" y esta clase debera estar disponible en el CLASSPATH del
# proyecto. La implementacion de esta clase corre a cargo del organismo que
# realiza el despliegue.
# Por ejemplo, agregando el JAR en la que se contiene al WAR del proyecto.
# Las cadenas cifradas deberan codificarse en base 64 e integrarse en las
# propiedades con la forma:
#	{@ciphered: DATOS_CIFRADOS_BASE64 }
# Por ejemplo,
#	bbdd.conn=jdbc:mysql://127.0.0.1:3306/fire_db?user=USUARIO&password={@ciphered: CADENA_BASE64 }
# Puede cifrarse completamente un valor o incluso cifrar distintos fragmentos del mismo. Por ejemplo:
#	bbdd.conn={@ciphered: CADENA_BASE64 }
#	bbdd.conn=jdbc:mysql://127.0.0.1:3306/fire_db?user={@ciphered: CADENA_BASE64 }&password={@ciphered: CADENA_BASE64 }


# Driver JDBC
bbdd.driver=com.mysql.jdbc.Driver

# Cadena de conexion con la base de datos
bbdd.conn=jdbc:mysql://127.0.0.1:3306/fire_db?user=carlos&password=1111

# Clase para el descifrado de propiedades. Esta clase debe implementar
# la interfaz "es.gob.fire.server.decipher.PropertyDecipher" incluida
# en el modulo "fire-signature-decipher".
cipher.class=

# Id de rastreo de la aplicacion con Google Analytics
google.trackingId=

# Identificador de la aplicacion frente a la Plataforma @firma
afirma.appId=minhap.seap.dtic.clavefirma

# Indica si debe habilitar la compatibilidad con bibliotecas XERCES/XALAN.
# Si en el classpath del servidor se encuentran las bibliotecas de XERCES/XALAN,
# sera necesario habilitar esta propiedad para evitar problemas de compatibilidad
# entre ellas y las clases internas de Java al realizar firmas XML. Tenga en cuenta
# que algunas aplicaciones como JBOSS 6 y superiores y CL@VE incorporan estas bibliotecas.
signature.alternativeXmldsig=false

# Establece el numero maximo de documentos que se permiten configurar dentro de un lote
# de firma. Si se intentan agregar mas documentos, la operacion de agregar documento
# devolvera un error. Si se establece el valor 0, se considerara que no hay limite de
# tamano de lote.
batch.maxDocuments=10

# Ruta del directorio para el almacenamiento temporal de documentos. Si no se indica, se
# utilizara el directorio de temporales del sistema (no recomendado debido a que sobre este
# directorio se aplicara la politica de borrado de ficheros caducados).
temp.dir=C:/pruebas/temp_clavefirma

# Numero de segundos que pueden transcurrir antes de considerar caducado un fichero temporal
# de FIRe. Pasado ese tiempo, la sesion se considerara caducada y el fichero podria borrarse.
# Por defecto, 10 minutos (600 segundos).
temp.fire.timeout=600

# Numero de segundos que pueden transcurrir antes de considerar caducado un fichero temporal
# de intercambio del Cliente @firma. Pasado ese tiempo el fichero podria borrarse.
# Por defecto, 10 minutos (600 segundos).
temp.afirma.timeout=600

# Gestor para la comparticion de sesiones entre los nodos en los que se despliegue el
# componente central. Esto solo debe usarse cuando se despliegue el componente central
# en varios nodos balanceados y no se compartan los objetos en memoria entre ellos.
# Por defecto, ninguno.
# Valores soportados:
#  - filesystem: Guardado de sesiones en disco.
sessions.dao=

# Nombre del atributo en el que buscar los certificados SSL cliente cuando no se encuentren
# como atributos de la operacion. Esto puede ser necesario cuando se conecta un Apache y el
# servidor de aplicacion con un proxy-pass en lugar de mediante AJP.
# Por defecto, ninguno
http.cert.attr=X-Client-Cert


# =============
# Configuracion de los gestores de documentos (DocumentManager)
# -------------
# Los distintos DocumentManager deberan declararse con el prefijo "docmanager." y
# el nombre que se le quiera asignar. Este nombre es el que deberan configurar en
# la llamada desde la aplicacion cliente. El DocumentManager "default" es el
# utilizado cuando las aplicaciones no indican nada.

# Gestor por defecto. Recibe y devuelve los datos.
docmanager.default=es.gob.fire.server.services.document.DefaultFIReDocumentManager

# Gestor que recibe el nombre del fichero a cargar y devuelve el nombre del fichero
# de firma generado. Los ficheros se cargan y guardan dentro del directorio indicado
# en el fichero de configuracion.
#docmanager.filesystem=es.gob.fire.server.services.document.FileSystemFIReDocumentManager

# -------------


# =============
# Configuracion de las paginas del componente central
# -------------

# Titulo que aparecera en las paginas web del componente central. Se permite
# el uso de entidades HTML para insertar caracteres que puedan producir
# problemas de codificacion ("&aacute;", "&ntilde;", "&amp;"...)
# Por defecto, FIRma Electronica - FIRe 
pages.title=FIRma Electr\u00F3nica - FIRe 

# URL externa de la imagen con el logotipo que debe mostrarse en las
# paginas del componente central.
# Por defecto, con el campo vacio, se muestra el logo de Gobierno de Espa√±a.
pages.logo=

# URL base en la que estaran accesibles los elementos publicos del componente central
# (servicios del Cliente @firma y paginas web). Solo es necesario configurarlo si se
# desean publicar en un contexto distinto al del resto del componente. A la URL
# configurada siempre se le agregara automaticamente un "/public" al final.
# Por ejemplo, si se configura "https://fire.com/miorganizacion", se buscaran los
# elementos publicos en "https://fire.com/miorganizacion/public".
# Por defecto, con el campo vacio o comentado, se utiliza el contexto de despliegue del
# WAR seguido de "/public".
pages.public.url=

# -------------


# =============
# Configuracion del despliegue del Cliente @firma
# -------------

# Establece si se debe forzar el uso de AutoFirma
# Por defecto, false.
clienteafirma.forceAutoFirma=false

# Establece si, en caso de usarse AutoFirma, debe forzarse el uso de una version
# nativa y no el despliegue JNLP
# Por defecto, true.
clienteafirma.forceNative=true

# -------------


# =============
# Indica cual es el conector del servicio de custodia
# -------------

# Listado de proveedores habilitados para su uso por parte de las aplicaciones.
# Los valores se ponen consecutivos, separados por comas (',').
# El nombre de proveedor "local", permite el uso de certificados locales.
# Todos los proveedores distintos de "local" deben declarar en este fichero su
# clase conectora mediante una propiedad llamada "provider.NOMBRE_CONECTOR".
# Al usuario se le mostraran todos los proveedores configurados en el orden que se
# indique en esta propiedad, salvo que la aplicacion cliente defina una seleccion
# de proveedores, en cuyo caso se mostraran solo los proveedores solicitados y en
# el orden indicado por la aplicacion. Si el nombre de algun proveedor se antecede
# del caracter arroba ('@'), se considerara que es imprescindible que aparezca y
# se mostrara al usuario incluso si no estaba entre la seleccion de proveedores de
# la aplicacion.
providers=clavefirmatest,local

# Conector con el servicio simulador de Cl@ve Firma para pruebas
provider.clavefirmatest=es.gob.fire.server.connector.test.TestConnector

# Conector con el servicio de Cl@ve Firma
provider.clavefirma=es.gob.fire.server.connector.clavefirma.ClaveFirmaConnector

# Conector con el servicio de FNMT-RCM
provider.fnmt=es.fnmt.fire.signature.connector.TrustedXConnector



# =============
# Opciones de de seguridad usadas cuando solo haya una aplicacion cliente y no haya base de datos
# -------------

# Identificador de la aplicacion cliente
#default.appId=

# Certificado de la aplicacion cliente
#default.certificate=

# =============